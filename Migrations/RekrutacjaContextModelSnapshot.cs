// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rekrutacja.Context;

#nullable disable

namespace Rekrutacja.Migrations
{
    [DbContext(typeof(RekrutacjaContext))]
    partial class RekrutacjaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Rekrutacja.Models.Adresy", b =>
                {
                    b.Property<int>("AdresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("adres_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdresId"));

                    b.Property<string>("Miasto")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("miasto");

                    b.Property<string>("Numer")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("numer");

                    b.Property<string>("Państwo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("państwo");

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("ulica");

                    b.Property<int>("UżytkownikId")
                        .HasColumnType("int")
                        .HasColumnName("użytkownik_id");

                    b.HasKey("AdresId");

                    b.HasIndex("UżytkownikId");

                    b.ToTable("Adresy");
                });

            modelBuilder.Entity("Rekrutacja.Models.Dokumenty", b =>
                {
                    b.Property<int>("DokumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("dokument_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DokumentId"));

                    b.Property<DateTime>("DataAktualizacjiStatusu")
                        .HasColumnType("date")
                        .HasColumnName("data_aktualizacji_statusu");

                    b.Property<DateTime>("DataPrzesłania")
                        .HasColumnType("date")
                        .HasColumnName("data_przesłania");

                    b.Property<int>("KandydatId")
                        .HasColumnType("int")
                        .HasColumnName("kandydat_id");

                    b.Property<string>("Komentarz")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("komentarz");

                    b.Property<int>("PracownicyId")
                        .HasColumnType("int")
                        .HasColumnName("pracownicy_id");

                    b.Property<string>("Rodzaj")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("rodzaj");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<string>("Uwagi")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("uwagi");

                    b.Property<string>("ŚcieżkaDokumentu")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ścieżka_dokumentu");

                    b.HasKey("DokumentId");

                    b.HasIndex("KandydatId");

                    b.HasIndex("PracownicyId");

                    b.ToTable("Dokumenty");
                });

            modelBuilder.Entity("Rekrutacja.Models.Egzaminy", b =>
                {
                    b.Property<int>("EgzaminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("egzamin_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EgzaminId"));

                    b.Property<DateTime>("DataPrzystąpienia")
                        .HasColumnType("date")
                        .HasColumnName("data_przystąpienia");

                    b.Property<int>("KandydatId")
                        .HasColumnType("int")
                        .HasColumnName("kandydat_id");

                    b.Property<string>("NazwaEgzaminu")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("nazwa_egzaminu");

                    b.Property<int>("Wynik")
                        .HasColumnType("int")
                        .HasColumnName("wynik");

                    b.HasKey("EgzaminId");

                    b.HasIndex("KandydatId");

                    b.ToTable("Egzaminy");
                });

            modelBuilder.Entity("Rekrutacja.Models.Kandydaci", b =>
                {
                    b.Property<int>("KandydatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("kandydat_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KandydatId"));

                    b.Property<DateTime>("DataAktualizacjiStatusu")
                        .HasColumnType("date")
                        .HasColumnName("data_aktualizacji_statusu");

                    b.Property<DateTime>("DataAplikacji")
                        .HasColumnType("date")
                        .HasColumnName("data_aplikacji");

                    b.Property<int>("KierunekId")
                        .HasColumnType("int")
                        .HasColumnName("kierunek_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<int>("UżytkownikId")
                        .HasColumnType("int")
                        .HasColumnName("użytkownik_id");

                    b.Property<string>("ŚcieżkaZdjęcia")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ścieżka_zdjęcia");

                    b.HasKey("KandydatId");

                    b.HasIndex("KierunekId");

                    b.HasIndex("UżytkownikId");

                    b.ToTable("Kandydaci");
                });

            modelBuilder.Entity("Rekrutacja.Models.Kierunki", b =>
                {
                    b.Property<int>("KierunekId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("kierunek_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KierunekId"));

                    b.Property<int>("LiczbaMiejsc")
                        .HasColumnType("int")
                        .HasColumnName("liczba_miejsc");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("nazwa");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("opis");

                    b.Property<int>("StopieńStudiów")
                        .HasColumnType("int")
                        .HasColumnName("stopień_studiów");

                    b.Property<string>("TrybStudiów")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("tryb_studiów");

                    b.HasKey("KierunekId");

                    b.ToTable("Kierunki");
                });

            modelBuilder.Entity("Rekrutacja.Models.Pracownicy", b =>
                {
                    b.Property<int>("PracownikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pracownik_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PracownikId"));

                    b.Property<string>("Departament")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("departament");

                    b.Property<string>("Obowiązki")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("obowiązki");

                    b.Property<string>("Stanowisko")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("stanowisko");

                    b.Property<int>("UżytkownikId")
                        .HasColumnType("int")
                        .HasColumnName("użytkownik_id");

                    b.HasKey("PracownikId");

                    b.HasIndex("UżytkownikId");

                    b.ToTable("Pracownicy");
                });

            modelBuilder.Entity("Rekrutacja.Models.Płatności", b =>
                {
                    b.Property<int>("PłatnośćId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("płatność_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PłatnośćId"));

                    b.Property<DateTime>("DataPłatności")
                        .HasColumnType("date")
                        .HasColumnName("data_płatności");

                    b.Property<int>("KandydatId")
                        .HasColumnType("int")
                        .HasColumnName("kandydat_id");

                    b.Property<double>("Kwota")
                        .HasColumnType("float")
                        .HasColumnName("kwota");

                    b.Property<string>("Metoda")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("metoda");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.HasKey("PłatnośćId");

                    b.HasIndex("KandydatId");

                    b.ToTable("Płatności");
                });

            modelBuilder.Entity("Rekrutacja.Models.Użytkownicy", b =>
                {
                    b.Property<int>("UżytkownikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("użytkownik_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UżytkownikId"));

                    b.Property<DateTime>("DataUrodzenia")
                        .HasColumnType("date")
                        .HasColumnName("data_urodzenia");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Imię")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("imię");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nazwisko");

                    b.Property<string>("NrDowodu")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("nr_dowodu");

                    b.Property<string>("Pesel")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("PESEL");

                    b.Property<string>("Płeć")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("płeć");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("telefon");

                    b.HasKey("UżytkownikId");

                    b.ToTable("Użytkownicy");
                });

            modelBuilder.Entity("Rekrutacja.Models.Adresy", b =>
                {
                    b.HasOne("Rekrutacja.Models.Użytkownicy", "Użytkownik")
                        .WithMany("Adresies")
                        .HasForeignKey("UżytkownikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Użytkownik");
                });

            modelBuilder.Entity("Rekrutacja.Models.Dokumenty", b =>
                {
                    b.HasOne("Rekrutacja.Models.Kandydaci", "Kandydat")
                        .WithMany("DokumentyKandydats")
                        .HasForeignKey("KandydatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rekrutacja.Models.Kandydaci", "Pracownicy")
                        .WithMany("DokumentyPracownicies")
                        .HasForeignKey("PracownicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kandydat");

                    b.Navigation("Pracownicy");
                });

            modelBuilder.Entity("Rekrutacja.Models.Egzaminy", b =>
                {
                    b.HasOne("Rekrutacja.Models.Kandydaci", "Kandydat")
                        .WithMany("Egzaminies")
                        .HasForeignKey("KandydatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kandydat");
                });

            modelBuilder.Entity("Rekrutacja.Models.Kandydaci", b =>
                {
                    b.HasOne("Rekrutacja.Models.Kierunki", "Kierunek")
                        .WithMany("Kandydacis")
                        .HasForeignKey("KierunekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rekrutacja.Models.Użytkownicy", "Użytkownik")
                        .WithMany("Kandydacis")
                        .HasForeignKey("UżytkownikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kierunek");

                    b.Navigation("Użytkownik");
                });

            modelBuilder.Entity("Rekrutacja.Models.Pracownicy", b =>
                {
                    b.HasOne("Rekrutacja.Models.Użytkownicy", "Użytkownik")
                        .WithMany("Pracownicies")
                        .HasForeignKey("UżytkownikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Użytkownik");
                });

            modelBuilder.Entity("Rekrutacja.Models.Płatności", b =>
                {
                    b.HasOne("Rekrutacja.Models.Kandydaci", "Kandydat")
                        .WithMany("Płatnościs")
                        .HasForeignKey("KandydatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kandydat");
                });

            modelBuilder.Entity("Rekrutacja.Models.Kandydaci", b =>
                {
                    b.Navigation("DokumentyKandydats");

                    b.Navigation("DokumentyPracownicies");

                    b.Navigation("Egzaminies");

                    b.Navigation("Płatnościs");
                });

            modelBuilder.Entity("Rekrutacja.Models.Kierunki", b =>
                {
                    b.Navigation("Kandydacis");
                });

            modelBuilder.Entity("Rekrutacja.Models.Użytkownicy", b =>
                {
                    b.Navigation("Adresies");

                    b.Navigation("Kandydacis");

                    b.Navigation("Pracownicies");
                });
#pragma warning restore 612, 618
        }
    }
}
